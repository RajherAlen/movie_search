{"version":3,"sources":["component/tableBar/table.jsx","component/movieRow/MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["Table","className","alt","width","src","MovieRow","viewMovie","url","props","movie","id","window","location","href","key","this","poster_src","title","overview","type","onClick","value","Component","App","searchChangeHandler","event","console","log","target","boundObject","searchTerm","performSearch","state","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","push","setState","rows","error","xhr","status","err","style","fontSize","display","paddingTop","paddingBottom","paddingLeft","onChange","placeholder","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2OAEaA,EAAQ,kBACnB,2BAAOC,UAAU,aACf,+BACE,4BACE,4BACE,yBAAKC,IAAI,OAAOC,MAAM,KAAKC,IAAI,oBAEjC,wBAAID,MAAM,MACV,4BACE,oDCkBKE,E,4MA1BbC,UAAY,WAEV,IAAMC,EAAM,oCAAsC,EAAKC,MAAMC,MAAMC,GACnEC,OAAOC,SAASC,KAAON,G,uDAIvB,OACE,2BAAON,UAAU,aAAaa,IAAKC,KAAKP,MAAMC,MAAMC,IAClD,+BACE,4BACE,4BACE,yBAAKP,MAAM,MAAMC,IAAKW,KAAKP,MAAMC,MAAMO,cAEzC,4BACE,4BAAKD,KAAKP,MAAMC,MAAMQ,OACtB,2BAAIF,KAAKP,MAAMC,MAAMS,UACrB,2BAAOC,KAAK,SAASC,QAASL,KAAKT,UAAWe,MAAM,iB,GAlB3CC,a,gBCwERC,G,wDAlEb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAoCRgB,oBAAsB,SAACC,GACrBC,QAAQC,IAAIF,EAAMG,OAAOP,OACzB,IAAMQ,EAAW,eACXC,EAAaL,EAAMG,OAAOP,MAChCQ,EAAYE,cAAcD,IAvC1B,EAAKE,MAAQ,GACb,EAAKD,cAAc,YAHF,E,0DAMLD,GAAa,IAAD,OACxBJ,QAAQC,IAAI,gCACZ,IAAMM,EACJ,4FACAH,EACFI,IAAEC,KAAK,CACL5B,IAAK0B,EACLG,QAAS,SAACC,GACRX,QAAQC,IAAI,6BAEZ,IAAMW,EAAUD,EAAcC,QAG1BC,EAAY,GAEhBD,EAAQE,SAAQ,SAAC/B,GACfA,EAAMO,WACJ,kCAAoCP,EAAMgC,YAE5C,IAAMC,EAAW,kBAAC,EAAD,CAAU5B,IAAKL,EAAMC,GAAID,MAAOA,IACjD8B,EAAUI,KAAKD,MAGjB,EAAKE,SAAS,CAAEC,KAAMN,KAExBO,MAAO,SAACC,EAAKC,EAAQC,GACnBvB,QAAQoB,MAAM,6B,+BAalB,OACE,6BACE,kBAAC,EAAD,MACA,2BACEI,MAAO,CACLC,SAAU,GACVC,QAAS,QACTjD,MAAO,MACPkD,WAAY,EACZC,cAAe,EACfC,YAAa,IAEfC,SAAUzC,KAAKS,oBACfiC,YAAY,sBAEb1C,KAAKiB,MAAMa,U,GA7DFvB,cCKEoC,QACW,cAA7B/C,OAAOC,SAAS+C,UAEe,UAA7BhD,OAAOC,SAAS+C,UAEhBhD,OAAOC,SAAS+C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1B,GACLpB,QAAQoB,MAAMA,EAAM2B,a","file":"static/js/main.eee4f046.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport const Table = () => (\r\n  <table className=\"table-bar\">\r\n    <tbody>\r\n      <tr>\r\n        <td>\r\n          <img alt=\"logo\" width=\"50\" src=\"movie-logo.png\" />\r\n        </td>\r\n        <td width=\"8\" />\r\n        <td>\r\n          <h1>MoviesDB Search</h1>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n);\r\n","import React, { Component } from \"react\";\r\n\r\nclass MovieRow extends Component {\r\n  viewMovie = () => {\r\n    // console.log(this.props.movie.title);\r\n    const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id;\r\n    window.location.href = url;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <table className=\"movie-list\" key={this.props.movie.id}>\r\n        <tbody>\r\n          <tr>\r\n            <td>\r\n              <img width=\"150\" src={this.props.movie.poster_src} />\r\n            </td>\r\n            <td>\r\n              <h3>{this.props.movie.title}</h3>\r\n              <p>{this.props.movie.overview}</p>\r\n              <input type=\"button\" onClick={this.viewMovie} value=\"View\" />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieRow;\r\n","import React, { Component } from \"react\";\nimport { Table } from \"./component/tableBar/table\";\nimport MovieRow from \"./component/movieRow/MovieRow\";\nimport $ from \"jquery\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.performSearch(\"avengers\");\n  }\n\n  performSearch(searchTerm) {\n    console.log(\"Perform search using moviedb\");\n    const urlString =\n      \"https://api.themoviedb.org/3/search/movie?api_key=1b5adf76a72a13bad99b8fc0c68cb085&query=\" +\n      searchTerm;\n    $.ajax({\n      url: urlString,\n      success: (searchResults) => {\n        console.log(\"Fetched data successfully\");\n        // console.log(searchResults)\n        const results = searchResults.results;\n        // console.log(results[0])\n\n        var movieRows = [];\n\n        results.forEach((movie) => {\n          movie.poster_src =\n            \"https://image.tmdb.org/t/p/w185\" + movie.poster_path;\n          // console.log(movie.poster_path)\n          const movieRow = <MovieRow key={movie.id} movie={movie} />;\n          movieRows.push(movieRow);\n        });\n\n        this.setState({ rows: movieRows });\n      },\n      error: (xhr, status, err) => {\n        console.error(\"Failed to fetch data\");\n      },\n    });\n  }\n\n  searchChangeHandler = (event) => {\n    console.log(event.target.value);\n    const boundObject = this;\n    const searchTerm = event.target.value;\n    boundObject.performSearch(searchTerm);\n  };\n  // RENDERING\n  render() {\n    return (\n      <div>\n        <Table />\n        <input\n          style={{\n            fontSize: 24,\n            display: \"block\",\n            width: \"99%\",\n            paddingTop: 8,\n            paddingBottom: 8,\n            paddingLeft: 16,\n          }}\n          onChange={this.searchChangeHandler}\n          placeholder=\"Enter search term\"\n        />\n        {this.state.rows}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}